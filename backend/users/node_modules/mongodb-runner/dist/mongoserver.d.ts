import type { MongoClientOptions } from 'mongodb';
import { MongoClient } from 'mongodb';
export interface MongoServerOptions {
    binDir?: string;
    binary: string;
    tmpDir: string;
    logDir?: string;
    args?: string[];
    docker?: string | string[];
}
interface SerializedServerProperties {
    _id: string;
    pid?: number;
    port?: number;
    dbPath?: string;
    startTime: string;
    hasInsertedMetadataCollEntry: boolean;
}
export declare class MongoServer {
    private uuid;
    private buildInfo?;
    private childProcess?;
    private pid?;
    private port?;
    private dbPath?;
    private closing;
    private startTime;
    private hasInsertedMetadataCollEntry;
    private constructor();
    serialize(): SerializedServerProperties;
    static deserialize(serialized: SerializedServerProperties): Promise<MongoServer>;
    get hostport(): string;
    get serverVersion(): string;
    get serverVariant(): 'enterprise' | 'community';
    static start({ ...options }: MongoServerOptions): Promise<MongoServer>;
    static _start({ ...options }: MongoServerOptions): Promise<MongoServer>;
    close(): Promise<void>;
    private _ensureMatchingMetadataColl;
    private _populateBuildInfo;
    withClient<Fn extends (client: MongoClient) => any>(fn: Fn, clientOptions?: MongoClientOptions): Promise<ReturnType<Fn>>;
    ref(): void;
    unref(): void;
}
export {};
//# sourceMappingURL=mongoserver.d.ts.map